//Адаптивное свойство
@mixin adaptiv-value($property, $startSize, $minSize, $type, $maxWidthContainer) {
	$addSize: $startSize - $minSize;

	@if $type==1 {
		//Только если меньше контейнера
		#{$property}: $startSize + px;

		@media (max-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 375px) / #{$maxWidthContainer - 375}));
		}
	}

	@else if $type==2 {
		//Только если больше контейнера
		#{$property}: $startSize + px;

		@media (min-width: #{$maxWidthContainer + px}) {
			#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 375px) / #{$maxWidth - 375}));
		}
	}

	@else {
		//Всегда
		#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 375px) / #{$maxWidth - 375}));
	}
}

//Адаптивное свойство mobile-first       375 - минимальный размер указанный в макете, 320 - минимальный размер сетки, maxwidthContainer - до какого брейкпоинта действует 
@mixin adaptiv-value-m($property, $startSize, $minSize, $maxWidthContainer) {
	$addSize: $startSize - $minSize;

	#{$property}: $startSize + px;

	#{$property}: auto;
	@media (min-width: #{320 + px}) {
		#{$property}: calc(#{$minSize + px} + #{$addSize} * ((100vw - 375px) / #{$maxWidthContainer - 375}));
	}
	@media (min-width: #{$maxWidthContainer + px}) {
		#{$property}: auto;
	}

}

//Адаптивное свойство до
@mixin adaptiv-value-to($property, $startSize, $minSize, $minWidth, $maxWidth) {
	$addSize: $startSize - $minSize;

	//#{$property}: $minSize + px;
	@media (min-width: #{$minWidth + px}) {
		#{$property}: calc(#{$minSize + px} + #{$addSize} * (((100vw - #{$minWidth + px})) / ((#{$maxWidth - $minWidth}))));
	}
}

//rem
@function rem($value) {
	$remValue: ($value / 16) + rem;
	@return $remValue;
}